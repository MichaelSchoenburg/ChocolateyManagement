{"Script":{"MonScriptCategoryI3D":7,"Name":"Chocolatey (Installation + Update)","ScriptKind":2,"ScriptType":0,"Script":"<#\r\n.SYNOPSIS\r\n    Chocolatey Management Script\r\n\r\n.DESCRIPTION\r\n    Script to be used in (e. g.) remote monitoring and management solutions to automatically install and update software.\r\n\r\n.INPUTS\r\n    No parameters. Variables are supposed to be set by the rmm solution this script is used in.\r\n\r\n.OUTPUTS\r\n    None\r\n\r\n.RELATED LINKS\r\n    GitHub: https://github.com/MichaelSchoenburg/ChocolateyManagement\r\n\r\n.NOTES\r\n    Author: Michael SchÃ¶nburg\r\n    Version: v1.0\r\n    Last Edit: 03.04.2024\r\n    \r\n    This projects code loosely follows the PowerShell Practice and Style guide, as well as Microsofts PowerShell scripting performance considerations.\r\n    Style guide: https://poshcode.gitbook.io/powershell-practice-and-style/\r\n    Performance Considerations: https://docs.microsoft.com/en-us/powershell/scripting/dev-cross-plat/performance/script-authoring-considerations?view=powershell-7.1\r\n#>\r\n\r\n#region INITIALIZATION\r\n<# \r\n    Libraries, Modules, ...\r\n#>\r\n\r\n#endregion INITIALIZATION\r\n#region DECLARATIONS\r\n<#\r\n    Declare local variables and global variables\r\n#>\r\n\r\n# The following variables should be set through your rmm solution.\r\n# If you want to install the package, set the respective variable to 1 (integer). Everything other than 1 will result in the package not being installed.\r\n# Tip: PowerShell variables are not case sensitive.\r\n\r\n<# \r\n\r\n$VSCode = 1\r\n$7zip = 1\r\n$adobereaderdc = 1\r\n...\r\n\r\n#>\r\n\r\n$AllPkgs = @()\r\n\r\n$AllPkgs += [PSCustomObject]@{ \r\n    FriendlyName = \"Visual Studio Code\"\r\n    PkgName = 'vscode'\r\n    Install = $VSCode \r\n}\r\n\r\n$AllPkgs += [PSCustomObject]@{\r\n    FriendlyName = \"7-Zip\"\r\n    PkgName='7zip'\r\n    Install = $7zip \r\n}\r\n\r\n$AllPkgs += [PSCustomObject]@{\r\n    FriendlyName = \"Adobe Reader DC\"\r\n    PkgName = 'adobereader'\r\n    Install = $adobereaderdc \r\n}\r\n\r\n$AllPkgs += [PSCustomObject]@{\r\n    FriendlyName = \"ZoomIt\"\r\n    PkgName = 'zoomit'\r\n    Install = $zoomit \r\n}\r\n\r\n$AllPkgs += [PSCustomObject]@{\r\n    FriendlyName = \"Zoom\"\r\n    PkgName = 'Zoom'\r\n    Install = $zoom \r\n}\r\n\r\n$AllPkgs += [PSCustomObject]@{\r\n    FriendlyName = \"PowerToys\"\r\n    PkgName = 'powertoys'\r\n    Install = $powertoys \r\n}\r\n\r\n$AllPkgs += [PSCustomObject]@{\r\n    FriendlyName = \"Microsoft Teams (new)\"\r\n    PkgName = 'microsoft-teams-new-bootstrapper'\r\n    Install = $MSTeams\r\n}\r\n\r\n$AllPkgs += [PSCustomObject]@{\r\n    FriendlyName = \"PDF24\"\r\n    PkgName = 'pdf24'\r\n    Install = $PDF24\r\n}\r\n\r\n$AllPkgs += [PSCustomObject]@{\r\n    FriendlyName = \"VLC media player\"\r\n    PkgName = 'vlc'\r\n    Install = $VLCmediaplayer\r\n}\r\n\r\n$AllPkgs += [PSCustomObject]@{\r\n    FriendlyName = \"TreeSize Free\"\r\n    PkgName = 'treesizefree'\r\n    Install = $TreeSizeFree\r\n}\r\n\r\n# Hint regarding Visual Studio Code PowerShell Extension from the author Pascal Berger:\r\n# Unfortunately it is not possible to install a specific version of an extension through the Visual Studio Code CLI. \r\n# Therefore this package always installs the latest version of the extension \r\n# and the extension afterwards needs to be updated through the Visual Studio Code extension manager.\r\n\r\n$AllPkgs += [PSCustomObject]@{\r\n    FriendlyName = \"Visual Studio Code PowerShell Extension\"\r\n    PkgName = 'vscode-powershell'\r\n    Install = $VSCodePowerShell\r\n}\r\n\r\n$AllPkgs += [PSCustomObject]@{\r\n    FriendlyName = \"WinSCP\"\r\n    PkgName = 'winscp.install'\r\n    Install = $WinSCP\r\n}\r\n\r\n$AllPkgs += [PSCustomObject]@{\r\n    FriendlyName = \"PowerShell 7\"\r\n    PkgName = 'powershell-core'\r\n    Install = $PS7\r\n}\r\n\r\n#endregion DECLARATIONS\r\n#region FUNCTIONS\r\n<# \r\n    Declare Functions\r\n#>\r\n\r\nfunction Write-ConsoleLog {\r\n    <#\r\n    .SYNOPSIS\r\n    Logs an event to the console.\r\n    \r\n    .DESCRIPTION\r\n    Writes text to the console with the current date (US format) in front of it.\r\n    \r\n    .PARAMETER Text\r\n    Event/text to be outputted to the console.\r\n    \r\n    .EXAMPLE\r\n    Write-ConsoleLog -Text 'Subscript XYZ called.'\r\n    \r\n    Long form\r\n    .EXAMPLE\r\n    Log 'Subscript XYZ called.\r\n    \r\n    Short form\r\n    #>\r\n    [alias('Log')]\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter(Mandatory = $true,\r\n        Position = 0)]\r\n        [string]\r\n        $Text\r\n    )\r\n\r\n    # Save current VerbosePreference\r\n    $VerbosePreferenceBefore = $VerbosePreference\r\n\r\n    # Enable verbose output\r\n    $VerbosePreference = 'Continue'\r\n\r\n    # Write verbose output\r\n    Write-Output \"$( Get-Date -Format 'MM/dd/yyyy HH:mm:ss' ) - $( $Text )\"\r\n\r\n    # Restore current VerbosePreference\r\n    $VerbosePreference = $VerbosePreferenceBefore\r\n}\r\n\r\nfunction Install-ChocoPkg {\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter(\r\n            Mandatory,\r\n            ValueFromPipelineByPropertyName\r\n        )]\r\n        [string]\r\n        $PkgName,\r\n\r\n        # I couldn't find a way to read the package name programmatically using Chocolatey, so it has to be specified manually.\r\n        [Parameter(\r\n            ValueFromPipelineByPropertyName\r\n        )]\r\n        [string]\r\n        $FriendlyName = $PkgName,\r\n\r\n        [Parameter(\r\n            ValueFromPipelineByPropertyName\r\n        )]\r\n        [int]\r\n        $Install = 1\r\n    )\r\n    \r\n    process {\r\n        if ($Install -eq 1) {\r\n            Log \"$($FriendlyName) should be installed.\"\r\n            $Result = choco list --limit-output --exact $PkgName | ConvertFrom-Csv -delimiter \"|\" -Header Id, Version\r\n            if ($Result.Count -eq 0) {\r\n                Log \"$($FriendlyName) is not yet installed. Start installation...\"\r\n                choco install $PkgName --confirm\r\n            } else {\r\n                Log \"$($FriendlyName) is already installed in version $($Result.Version).\"\r\n            }\r\n        } else {\r\n            Log \"$($FriendlyName) should NOT be installed.\"\r\n        }\r\n    }\r\n}\r\n\r\n#endregion FUNCTIONS\r\n#region EXECUTION\r\n\r\n#region ChocoInstall\r\n<# \r\n    Install Chocolatey\r\n#>\r\n\r\n# Check if Chocolatey is installed\r\nif (Get-Command -Name choco.exe -ErrorAction SilentlyContinue) {\r\n    Log \"Chocolatey is already installed.\"\r\n} else {\r\n    Log \"Chocolatey is not installed yet. Start installation...\"\r\n    # Install Chocolatey\r\n    Set-ExecutionPolicy Bypass -Scope Process -Force\r\n    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072\r\n    Invoke-WebRequest https://community.chocolatey.org/install.ps1 -UseBasicParsing | Invoke-Expression\r\n}\r\n\r\n#endregion ChocoInstall\r\n#region ChocoPkgs\r\n<# \r\n    Install packages\r\n#>\r\n\r\n$AllPkgs | Install-ChocoPkg\r\n\r\n#endregion ChocoPkgs\r\n#region ChocoUpdate\r\n<# \r\n    Update all packages\r\n#>\r\n\r\nLog 'Updating all packages...'\r\nchoco upgrade all --confirm\r\n\r\n#endregion ChocoUpdate\r\n\r\n#endregion EXECUTION\r\n","ExitCodeSuccess":0,"ExitCodeWarning":2,"ExitCodeError":1,"IsSelfHeal":false,"SelfHealingScript":null,"SelfHealingExitCodeSuccess":0,"SelfHealingExitCodeError":0,"ThirdPartyIdentifier":null,"ArticleCode":null,"UniqueId":null},"Parameters":[{"ScriptI3D":60,"ParameterName":"$VSCode","DisplayName":"Visual Studio Code installieren? (1 = ja; alles andere = nein)","DefaultValue":"1","IsRequired":true,"ValueType":2},{"ScriptI3D":60,"ParameterName":"$7zip","DisplayName":"7-Zip installieren? (1 = ja; alles andere = nein)","DefaultValue":"1","IsRequired":true,"ValueType":2},{"ScriptI3D":60,"ParameterName":"$adobereaderdc","DisplayName":"Adobe Reader DC installieren? (1 = ja; alles andere = nein)","DefaultValue":"1","IsRequired":true,"ValueType":2},{"ScriptI3D":60,"ParameterName":"$PDF24","DisplayName":"PDF24 installieren? (1 = ja; alles andere = nein)","DefaultValue":"0","IsRequired":true,"ValueType":2},{"ScriptI3D":60,"ParameterName":"$VLCmediaplayer","DisplayName":"VLC media player installieren? (1 = ja; alles andere = nein)","DefaultValue":"0","IsRequired":true,"ValueType":2},{"ScriptI3D":60,"ParameterName":"$TreeSizeFree","DisplayName":"TreeSize Free installieren? (1 = ja; alles andere = nein)","DefaultValue":"1","IsRequired":true,"ValueType":2},{"ScriptI3D":60,"ParameterName":"$VSCodePowerShell","DisplayName":"Visual Studio Code PowerShell Extension installieren? (1 = ja; alles andere = nein)","DefaultValue":"1","IsRequired":true,"ValueType":2},{"ScriptI3D":60,"ParameterName":"$WinSCP","DisplayName":"WinSCP installieren? (1 = ja; alles andere = nein)","DefaultValue":"0","IsRequired":true,"ValueType":2},{"ScriptI3D":60,"ParameterName":"$PS7","DisplayName":"PowerShell 7 installieren? (1 = ja; alles andere = nein)","DefaultValue":"1","IsRequired":true,"ValueType":2},{"ScriptI3D":60,"ParameterName":"$zoomit","DisplayName":"ZoomIt installieren? (1 = ja; alles andere = nein)","DefaultValue":"1","IsRequired":true,"ValueType":2},{"ScriptI3D":60,"ParameterName":"$zoom","DisplayName":"Zoom installieren? (1 = ja; alles andere = nein)","DefaultValue":"1","IsRequired":true,"ValueType":2},{"ScriptI3D":60,"ParameterName":"$powertoys","DisplayName":"PowerToys installieren? (1 = ja; alles andere = nein)","DefaultValue":"1","IsRequired":true,"ValueType":2},{"ScriptI3D":60,"ParameterName":"$MSTeams","DisplayName":"MS Teams installieren? (1 = ja; alles andere = nein)","DefaultValue":"1","IsRequired":true,"ValueType":2}]}